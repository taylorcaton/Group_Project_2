'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _responses = require('./responses');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Created by sbardian on 5/12/17.
 */

var openTriviaAPI = {
  /**
   * The Axios instance used for API queries. Not meant for general use.
   *
   * @private
   */
  _axios: _axios2.default.create({
    baseURL: 'https://opentdb.com/',
    headers: {
      // TODO: Check what headers are needed.
    }
  }),

  /**
   * Fetches data from the supplied API endpoint.
   *
   * response_code status code 0 returns an Object (data found).
   * response_code status code 1 returns an Object (data found but is an error).
   * response_code status code 2 returns an Object (data found but is an error).
   * response_code status code 3 returns an Object (data found but is an error).
   * response_code status code 4 returns an Object (data found but is an error).
   *
   * @private
   * @param {string} query - The query for the API.
   * @returns {Promise} - Promise which resolves to the data resulting from the
   * query, or rejects with an Error
   */
  _fetchFromApi: function _fetchFromApi(query) {
    return Promise.resolve(openTriviaAPI._axios.get(query)).then(function (res) {
      if (res.data.response_code !== 0) {
        switch (res.data.response_code) {
          case _responses.NO_RESULTS.status:
            throw new Error(_responses.NO_RESULTS.message);
          case _responses.INVALID_PARAMETER.status:
            throw new Error(_responses.INVALID_PARAMETER.message);
          case _responses.TOKEN_NOT_FOUND.status:
            throw new Error(_responses.TOKEN_NOT_FOUND.message);
          case _responses.TOKEN_EMPTY.status:
            throw new Error(_responses.TOKEN_EMPTY.message);
          default:
            throw new Error(_responses.DEFAULT_ERROR.message);
        }
      } else {
        return res.data;
      }
    });
  },

  /**
   * Fetches a session token from the API
   *
   * @param {string} token - current token.
   * @returns {Number} response_code - 0 = Success.
   */
  resetToken: function resetToken(token) {
    return openTriviaAPI._fetchFromApi('api_token.php?command=reset&token=' + token);
  },

  /**
   * Resets a session token from the API
   *
   * @returns {string} token - Session token.
   */
  getToken: function getToken() {
    return openTriviaAPI._fetchFromApi('api_token.php?command=request');
  },

  /**
   * Fetches the questions based on the query provided.
   *
   * @param {Object} [options] a configuration object
   * @returns {Promise} a Promise which resolves to an Object representing a single
   * question or a set of questions, or rejects with an Error
   */
  getQuestions: function getQuestions(options) {
    var endpoint = 'api.php';
    var params = [];

    if (options.amount) {
      params.push('amount=' + encodeURIComponent(options.amount));
    } else {
      params.push('amount=1');
    }
    if (options.category) {
      params.push('category=' + encodeURIComponent(options.category));
    }
    if (options.type) {
      params.push('type=' + encodeURIComponent(options.type));
    }
    if (options.encode) {
      params.push('encoding=' + encodeURIComponent(options.encode));
    }
    if (options.token) {
      params.push('token=' + encodeURIComponent(options.token));
    }
    return openTriviaAPI._fetchFromApi(endpoint + '?' + params.join('&'));
  }
};

exports.default = openTriviaAPI;
module.exports = exports['default'];